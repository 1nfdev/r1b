# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _r1b
else:
    import _r1b

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class FloatArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _r1b.FloatArray_swiginit(self, _r1b.new_FloatArray(nelements))
    __swig_destroy__ = _r1b.delete_FloatArray

    def __getitem__(self, index):
        return _r1b.FloatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _r1b.FloatArray___setitem__(self, index, value)

    def cast(self):
        return _r1b.FloatArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _r1b.FloatArray_frompointer(t)

# Register FloatArray in _r1b:
_r1b.FloatArray_swigregister(FloatArray)

def FloatArray_frompointer(t):
    return _r1b.FloatArray_frompointer(t)

R1B_INFER = _r1b.R1B_INFER
R1B_DTHR_ORD = _r1b.R1B_DTHR_ORD
R1B_DTHR_FS = _r1b.R1B_DTHR_FS
R1B_SMPL_NN = _r1b.R1B_SMPL_NN
R1B_SMPL_BILINEAR = _r1b.R1B_SMPL_BILINEAR
R1B_BRDR_COPY = _r1b.R1B_BRDR_COPY
R1B_BRDR_ZERO = _r1b.R1B_BRDR_ZERO
R1B_BRDR_NONE = _r1b.R1B_BRDR_NONE
R1B_BRDR_WRAP = _r1b.R1B_BRDR_WRAP
R1B_FONT_HEX = _r1b.R1B_FONT_HEX
R1B_BLIT_OR = _r1b.R1B_BLIT_OR
R1B_BLIT_ADD = _r1b.R1B_BLIT_ADD
R1B_BLIT_FLIP = _r1b.R1B_BLIT_FLIP
R1B_BLIT_SET = _r1b.R1B_BLIT_SET
R1B_POLY_CONVEX = _r1b.R1B_POLY_CONVEX
R1B_POLY_CONCAVE = _r1b.R1B_POLY_CONCAVE
R1B_WIRE_NONE = _r1b.R1B_WIRE_NONE
R1B_WIRE_FRONT = _r1b.R1B_WIRE_FRONT
R1B_WIRE_ALL = _r1b.R1B_WIRE_ALL
R1B_SHDR_NONE = _r1b.R1B_SHDR_NONE
R1B_SHDR_FLAT = _r1b.R1B_SHDR_FLAT
R1B_SHDR_NDOTL = _r1b.R1B_SHDR_NDOTL
R1B_SHDR_NDOTLF = _r1b.R1B_SHDR_NDOTLF
R1B_UP2X_SAA5050 = _r1b.R1B_UP2X_SAA5050
R1B_UP2X_EPX = _r1b.R1B_UP2X_EPX
R1B_UP2X_EAGLE = _r1b.R1B_UP2X_EAGLE
R1B_UP2X_HQX = _r1b.R1B_UP2X_HQX
R1B_KERN_ELLIPSE = _r1b.R1B_KERN_ELLIPSE
R1B_KERN_GAUSS = _r1b.R1B_KERN_GAUSS
R1B_KERN_GAUSS1D = _r1b.R1B_KERN_GAUSS1D
R1B_KERN_CROSS = _r1b.R1B_KERN_CROSS
R1B_KERN_RECT = _r1b.R1B_KERN_RECT
R1B_BLUR_GAUSS = _r1b.R1B_BLUR_GAUSS
R1B_BLUR_BOX = _r1b.R1B_BLUR_BOX
R1B_FLAG_SORTED = _r1b.R1B_FLAG_SORTED
class r1b_im_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    w = property(_r1b.r1b_im_t_w_get, _r1b.r1b_im_t_w_set)
    h = property(_r1b.r1b_im_t_h_get, _r1b.r1b_im_t_h_set)
    data = property(_r1b.r1b_im_t_data_get, _r1b.r1b_im_t_data_set)

    def __init__(self):
        _r1b.r1b_im_t_swiginit(self, _r1b.new_r1b_im_t())
    __swig_destroy__ = _r1b.delete_r1b_im_t

# Register r1b_im_t in _r1b:
_r1b.r1b_im_t_swigregister(r1b_im_t)

class r1b_font_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    h = property(_r1b.r1b_font_t_h_get, _r1b.r1b_font_t_h_set)
    glyphs = property(_r1b.r1b_font_t_glyphs_get, _r1b.r1b_font_t_glyphs_set)
    n = property(_r1b.r1b_font_t_n_get, _r1b.r1b_font_t_n_set)
    offsets = property(_r1b.r1b_font_t_offsets_get, _r1b.r1b_font_t_offsets_set)
    sizes = property(_r1b.r1b_font_t_sizes_get, _r1b.r1b_font_t_sizes_set)
    cmap = property(_r1b.r1b_font_t_cmap_get, _r1b.r1b_font_t_cmap_set)
    flags = property(_r1b.r1b_font_t_flags_get, _r1b.r1b_font_t_flags_set)

    def __init__(self):
        _r1b.r1b_font_t_swiginit(self, _r1b.new_r1b_font_t())
    __swig_destroy__ = _r1b.delete_r1b_font_t

# Register r1b_font_t in _r1b:
_r1b.r1b_font_t_swigregister(r1b_font_t)

class r1b_mesh_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    X = property(_r1b.r1b_mesh_t_X_get, _r1b.r1b_mesh_t_X_set)
    Y = property(_r1b.r1b_mesh_t_Y_get, _r1b.r1b_mesh_t_Y_set)
    Z = property(_r1b.r1b_mesh_t_Z_get, _r1b.r1b_mesh_t_Z_set)
    tris = property(_r1b.r1b_mesh_t_tris_get, _r1b.r1b_mesh_t_tris_set)
    norms = property(_r1b.r1b_mesh_t_norms_get, _r1b.r1b_mesh_t_norms_set)
    n_vtx = property(_r1b.r1b_mesh_t_n_vtx_get, _r1b.r1b_mesh_t_n_vtx_set)
    n_tri = property(_r1b.r1b_mesh_t_n_tri_get, _r1b.r1b_mesh_t_n_tri_set)

    def __init__(self):
        _r1b.r1b_mesh_t_swiginit(self, _r1b.new_r1b_mesh_t())
    __swig_destroy__ = _r1b.delete_r1b_mesh_t

# Register r1b_mesh_t in _r1b:
_r1b.r1b_mesh_t_swigregister(r1b_mesh_t)


def r1b_get_font_fg8x12():
    return _r1b.r1b_get_font_fg8x12()

def r1b_make_tmp0(w, h):
    return _r1b.r1b_make_tmp0(w, h)

def r1b_make_tmp1(w, h):
    return _r1b.r1b_make_tmp1(w, h)

def r1b_cleanup():
    return _r1b.r1b_cleanup()

def r1b_read(path):
    return _r1b.r1b_read(path)

def r1b_snapshot(path, im):
    return _r1b.r1b_snapshot(path, im)

def r1b_zeros(w, h):
    return _r1b.r1b_zeros(w, h)

def r1b_ones(w, h):
    return _r1b.r1b_ones(w, h)

def r1b_from_array(w, h, arr):
    return _r1b.r1b_from_array(w, h, arr)

def r1b_infs(w, h):
    return _r1b.r1b_infs(w, h)

def r1b_free(im):
    return _r1b.r1b_free(im)

def r1b_transpose(im):
    return _r1b.r1b_transpose(im)

def r1b_transpose_flip(im):
    return _r1b.r1b_transpose_flip(im)

def r1b_normalize(im, lo, hi):
    return _r1b.r1b_normalize(im, lo, hi)

def r1b_copy_of(im):
    return _r1b.r1b_copy_of(im)

def r1b_copy_to(im, dst):
    return _r1b.r1b_copy_to(im, dst)

def r1b_dither_fs(im):
    return _r1b.r1b_dither_fs(im)

def r1b_dither_ord(im):
    return _r1b.r1b_dither_ord(im)

def r1b_dither(im, mode):
    return _r1b.r1b_dither(im, mode)

def r1b_log(im):
    return _r1b.r1b_log(im)

def r1b_encode(im, n_bytes_written):
    return _r1b.r1b_encode(im, n_bytes_written)

def r1b_encode2file(path, im):
    return _r1b.r1b_encode2file(path, im)

def r1b_lpr(printer, im):
    return _r1b.r1b_lpr(printer, im)

def r1b_resample_nearest(im, w, h):
    return _r1b.r1b_resample_nearest(im, w, h)

def r1b_resample_bilinear(im, w, h):
    return _r1b.r1b_resample_bilinear(im, w, h)

def r1b_resample(im, w, h, mode):
    return _r1b.r1b_resample(im, w, h, mode)

def r1b_get(im, x, y, mode):
    return _r1b.r1b_get(im, x, y, mode)

def r1b_set(im, x, y, val, mode):
    return _r1b.r1b_set(im, x, y, val, mode)

def r1b_upsample2x_saa5050(im):
    return _r1b.r1b_upsample2x_saa5050(im)

def r1b_upsample2x_epx(im):
    return _r1b.r1b_upsample2x_epx(im)

def r1b_upsample2x_eagle(im):
    return _r1b.r1b_upsample2x_eagle(im)

def r1b_hq2x_blend(rule, E, A, B, D, F, H):
    return _r1b.r1b_hq2x_blend(rule, E, A, B, D, F, H)

def r1b_upsample2x_hqx(im):
    return _r1b.r1b_upsample2x_hqx(im)

def r1b_upsample2x(im, mode):
    return _r1b.r1b_upsample2x(im, mode)

def r1b_bedstead(im, n):
    return _r1b.r1b_bedstead(im, n)

def r1b_triangle(im, x0, y0, x1, y1, x2, y2, pttn, mode):
    return _r1b.r1b_triangle(im, x0, y0, x1, y1, x2, y2, pttn, mode)

def r1b_rect(im, x0, y0, x1, y1, pttn, mode):
    return _r1b.r1b_rect(im, x0, y0, x1, y1, pttn, mode)

def r1b_line(im, x0, y0, x1, y1, val, mode):
    return _r1b.r1b_line(im, x0, y0, x1, y1, val, mode)

def r1b_lines(im, Xs, Ys, n, close, val, mode):
    return _r1b.r1b_lines(im, Xs, Ys, n, close, val, mode)

def r1b_thick_line(im, x0, y0, x1, y1, val, thick, mode):
    return _r1b.r1b_thick_line(im, x0, y0, x1, y1, val, thick, mode)

def r1b_load_font_hex(path, h, cp0, cp1, flags):
    return _r1b.r1b_load_font_hex(path, h, cp0, cp1, flags)

def r1b_destroy_font(font):
    return _r1b.r1b_destroy_font(font)

def r1b_glyph_index_lin_search(font, cp):
    return _r1b.r1b_glyph_index_lin_search(font, cp)

def r1b_glyph_index_bin_search(font, cp, i0, i1):
    return _r1b.r1b_glyph_index_bin_search(font, cp, i0, i1)

def r1b_glyph_index(font, cp):
    return _r1b.r1b_glyph_index(font, cp)

def r1b_putchar(im, cp, x, y, font, val, mode, highlight):
    return _r1b.r1b_putchar(im, cp, x, y, font, val, mode, highlight)

def r1b_text(im, str, x, y, font, val, mode, highlight):
    return _r1b.r1b_text(im, str, x, y, font, val, mode, highlight)

def r1b_text_utf8(im, str, x, y, font, val, mode, highlight):
    return _r1b.r1b_text_utf8(im, str, x, y, font, val, mode, highlight)

def r1b_text_ascii(im, str, x, y, font, val, mode, highlight):
    return _r1b.r1b_text_ascii(im, str, x, y, font, val, mode, highlight)

def r1b_area(X, Y, n):
    return _r1b.r1b_area(X, Y, n)

def r1b_triangulate_snip(X, Y, u, v, w, n, V):
    return _r1b.r1b_triangulate_snip(X, Y, u, v, w, n, V)

def r1b_triangulate(X, Y, n, triangles):
    return _r1b.r1b_triangulate(X, Y, n, triangles)

def r1b_polygon_convex(im, Xs, Ys, n, pttn, mode):
    return _r1b.r1b_polygon_convex(im, Xs, Ys, n, pttn, mode)

def r1b_polygon_concave(im, Xs, Ys, n, pttn, mode):
    return _r1b.r1b_polygon_concave(im, Xs, Ys, n, pttn, mode)

def r1b_polygon(im, Xs, Ys, n, pttn, mode, typ):
    return _r1b.r1b_polygon(im, Xs, Ys, n, pttn, mode, typ)

def r1b_ellipse(im, cx, cy, rx, ry, ang, pttn, mode):
    return _r1b.r1b_ellipse(im, cx, cy, rx, ry, ang, pttn, mode)

def r1b_line_ellipse(im, cx, cy, rx, ry, ang, detail, val, mode):
    return _r1b.r1b_line_ellipse(im, cx, cy, rx, ry, ang, detail, val, mode)

def r1b_blit(dst, src, msk, x0, y0, x1, y1, sx, sy, bdmode, mode):
    return _r1b.r1b_blit(dst, src, msk, x0, y0, x1, y1, sx, sy, bdmode, mode)

def r1b_paste(dst, src, x, y):
    return _r1b.r1b_paste(dst, src, x, y)

def r1b_load_obj(path):
    return _r1b.r1b_load_obj(path)

def r1b_mesh_bbox(mesh, xmin, ymin, zmin, xmax, ymax, zmax):
    return _r1b.r1b_mesh_bbox(mesh, xmin, ymin, zmin, xmax, ymax, zmax)

def r1b_normalize_mesh(mesh):
    return _r1b.r1b_normalize_mesh(mesh)

def r1b_destroy_mesh(mesh):
    return _r1b.r1b_destroy_mesh(mesh)

def r1b_triangle3d(im, depth, f, x0, y0, z0, x1, y1, z1, x2, y2, z2, pttn, vals, mode):
    return _r1b.r1b_triangle3d(im, depth, f, x0, y0, z0, x1, y1, z1, x2, y2, z2, pttn, vals, mode)

def r1b_line3d(im, depth, depth_read, f, x0, y0, z0, x1, y1, z1, val, mode):
    return _r1b.r1b_line3d(im, depth, depth_read, f, x0, y0, z0, x1, y1, z1, val, mode)

def r1b_transform_mesh(mesh, mat):
    return _r1b.r1b_transform_mesh(mesh, mat)

def r1b_compute_vertex_normals(mesh):
    return _r1b.r1b_compute_vertex_normals(mesh)

def r1b_render_mesh(im, depth, mesh, f, pttn, light, wire_val, shdr, wire):
    return _r1b.r1b_render_mesh(im, depth, mesh, f, pttn, light, wire_val, shdr, wire)

def r1b_make_kernel(ksize, mode):
    return _r1b.r1b_make_kernel(ksize, mode)

def r1b_conv2d(im, kern, border):
    return _r1b.r1b_conv2d(im, kern, border)

def r1b_dilate(im, kern):
    return _r1b.r1b_dilate(im, kern)

def r1b_erode(im, kern):
    return _r1b.r1b_erode(im, kern)

def r1b_sobel(im, out_gradient_directions):
    return _r1b.r1b_sobel(im, out_gradient_directions)

def r1b_blur(im, rad, mode):
    return _r1b.r1b_blur(im, rad, mode)

def r1b_canny(im, blur_rad, thresh_lo, thresh_hi):
    return _r1b.r1b_canny(im, blur_rad, thresh_lo, thresh_hi)

def r1b_threshold(im, th):
    return _r1b.r1b_threshold(im, th)

def r1b_threshold_adaptive(im, rad, bias, blur_mode):
    return _r1b.r1b_threshold_adaptive(im, rad, bias, blur_mode)

def nullptr():
    return _r1b.nullptr()


cleanup=r1b_cleanup
read=r1b_read
snapshot=r1b_snapshot
zeros=r1b_zeros
ones=r1b_ones
from_array=r1b_from_array
infs=r1b_infs
free=r1b_free
transpose=r1b_transpose
transpose_flip=r1b_transpose_flip
normalize=r1b_normalize
copy_of=r1b_copy_of
copy_to=r1b_copy_to
dither=r1b_dither
log=r1b_log
encode=r1b_encode
encode2file=r1b_encode2file
lpr=r1b_lpr
resample=r1b_resample
get=r1b_get
set=r1b_set
upsample2x_saa5050=r1b_upsample2x_saa5050
upsample2x_epx=r1b_upsample2x_epx
upsample2x_eagle=r1b_upsample2x_eagle
hq2x_blend=r1b_hq2x_blend
upsample2x_hqx=r1b_upsample2x_hqx
upsample2x=r1b_upsample2x
bedstead=r1b_bedstead
triangle=r1b_triangle
rect=r1b_rect
line=r1b_line
thick_line=r1b_thick_line
load_font_hex=r1b_load_font_hex
destroy_font=r1b_destroy_font
glyph_index=r1b_glyph_index
putchar=r1b_putchar
text_utf8=r1b_text_utf8
text_ascii=r1b_text_ascii
triangulate=r1b_triangulate
ellipse=r1b_ellipse
line_ellipse=r1b_line_ellipse
blit=r1b_blit
paste=r1b_paste
load_obj=r1b_load_obj
normalize_mesh=r1b_normalize_mesh
destroy_mesh=r1b_destroy_mesh
triangle3d=r1b_triangle3d
line3d=r1b_line3d
compute_vertex_normals=r1b_compute_vertex_normals
make_kernel=r1b_make_kernel
conv2d=r1b_conv2d
dilate=r1b_dilate
erode=r1b_erode
sobel=r1b_sobel
blur=r1b_blur
canny=r1b_canny
threshold=r1b_threshold
threshold_adaptive=r1b_threshold_adaptive

INFER=R1B_INFER
DTHR_ORD=R1B_DTHR_ORD
DTHR_FS=R1B_DTHR_FS
SMPL_NN=R1B_SMPL_NN
SMPL_BILINEAR=R1B_SMPL_BILINEAR
BRDR_COPY=R1B_BRDR_COPY
BRDR_ZERO=R1B_BRDR_ZERO
BRDR_NONE=R1B_BRDR_NONE
BRDR_WRAP=R1B_BRDR_WRAP
FONT_HEX=R1B_FONT_HEX
BLIT_OR=R1B_BLIT_OR
BLIT_ADD=R1B_BLIT_ADD
BLIT_FLIP=R1B_BLIT_FLIP
BLIT_SET=R1B_BLIT_SET
POLY_CONVEX=R1B_POLY_CONVEX
POLY_CONCAVE=R1B_POLY_CONCAVE
WIRE_NONE=R1B_WIRE_NONE
WIRE_FRONT=R1B_WIRE_FRONT
WIRE_ALL=R1B_WIRE_ALL
SHDR_NONE=R1B_SHDR_NONE
SHDR_FLAT=R1B_SHDR_FLAT
SHDR_NDOTL=R1B_SHDR_NDOTL
SHDR_NDOTLF=R1B_SHDR_NDOTLF
UP2X_SAA5050=R1B_UP2X_SAA5050
UP2X_EPX=R1B_UP2X_EPX
UP2X_EAGLE=R1B_UP2X_EAGLE
UP2X_HQX=R1B_UP2X_HQX
KERN_ELLIPSE=R1B_KERN_ELLIPSE
KERN_GAUSS=R1B_KERN_GAUSS
KERN_GAUSS1D=R1B_KERN_GAUSS1D
KERN_CROSS=R1B_KERN_CROSS
KERN_RECT=R1B_KERN_RECT
BLUR_GAUSS=R1B_BLUR_GAUSS
BLUR_BOX=R1B_BLUR_BOX
FLAG_SORTED=R1B_FLAG_SORTED

def from_list(lst):
	h = len(lst)
	w = len(lst[0])
	arr = FloatArray(w*h)
	for i in range(h):
		for j in range(w):
			arr[i*w+j] = lst[i][j]
	return r1b_from_array(w,h,arr)

def to_list(im):
	lst = []
	for i in range(im.h):
		lst.append([])
		for j in range(im.w):
			lst[-1].append(get(im,j,i,BRDR_NONE))
	return lst

def float_array(lst):
	arr = FloatArray(len(lst))
	for i in range(len(lst)):
		arr[i] = lst[i]
	return arr

def lines(im,pts,close,val,mode):
	X,Y = zip(*pts)
	return r1b_lines(im,float_array(X),float_array(Y),len(X),close,val,mode)

def polygon(im,pts,pttn,mode):
	X,Y = zip(*pts)
	return r1b_polygon(im,float_array(X),float_array(Y),len(X),pttn,mode)

def transform_mesh(mesh,mat):
	return r1b_transform_mesh(mesh,float_array(mat))

def render_mesh(im, depth, mesh, f, pttn, light, wire_val, shdr, wire):
	if pttn == None:
		pttn = nullptr()

	if light != None:
		return r1b_render_mesh(im, depth, mesh, f, nullptr(), float_array(light), wire_val, shdr, wire)
	else:
		return r1b_render_mesh(im, depth, mesh, f, pttn, nullptr(), wire_val, shdr, wire)

PTTN_SOLID = r1b_from_array( 1, 1, float_array([1]))
PTTN_GRAY5 = r1b_from_array( 4, 4, float_array([1,1,0,1,  1,1,1,1,  0,1,1,1,  1,1,1,1,  ]))
PTTN_GRAY4 = r1b_from_array( 4, 4, float_array([1,1,0,1,  0,1,1,1,  1,1,0,1,  0,1,1,1,  ]))
PTTN_GRAY3 = r1b_from_array( 2, 2, float_array([1,0,  0,1,  ]))
PTTN_GRAY2 = r1b_from_array( 4, 4, float_array([0,0,1,0,  1,0,0,0,  0,0,1,0,  1,0,0,0,  ]))
PTTN_GRAY1 = r1b_from_array( 4, 4, float_array([0,0,1,0,  0,0,0,0,  1,0,0,0,  0,0,0,0,  ]))
PTTN_EMPTY = r1b_from_array( 1, 1, float_array([0]))
PTTN_GRID1 = r1b_from_array( 2, 2, float_array([0,1,  1,1,  ]))
PTTN_GRID2 = r1b_from_array( 4, 4, float_array([0,0,0,1,  0,0,0,1,  0,0,0,1,  1,1,1,1,  ]))
PTTN_DOTS1 = r1b_from_array( 2, 2, float_array([1,0,  0,0,  ]))
PTTN_DOTS2 = r1b_from_array( 4, 4, float_array([1,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0,  ]))
PTTN_DOTSR = r1b_from_array(12,12, float_array([0,0,0,0,0,1,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,  0,1,0,0,0,0,0,0,0,0,0,1,  0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,1,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,  1,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,1,0,0,0,0,0,1,  0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,  0,0,1,0,0,0,0,0,0,1,0,0,  ]))
PTTN_HRZL1 = r1b_from_array( 1, 2, float_array([1,  0,  ]))
PTTN_VRTL1 = r1b_from_array( 2, 1, float_array([1,0,  ]))
PTTN_HRZL2 = r1b_from_array( 1, 4, float_array([1,  0,  0,  0,  ]))
PTTN_VRTL2 = r1b_from_array( 4, 1, float_array([1,0,0,0,  ]))
PTTN_DGNLL = r1b_from_array( 4, 4, float_array([0,0,0,1,  0,0,1,0,  0,1,0,0,  1,0,0,0,  ]))
PTTN_DGNLR = r1b_from_array( 4, 4, float_array([1,0,0,0,  0,1,0,0,  0,0,1,0,  0,0,0,1,  ]))
PTTN_CROSS = r1b_from_array( 4, 4, float_array([1,0,0,0,  0,1,0,1,  0,0,1,0,  0,1,0,1,  ]))
PTTN_BRICK = r1b_from_array( 8, 8, float_array([1,1,1,1,1,1,1,1,  0,0,0,0,1,0,0,0,  0,0,0,0,1,0,0,0,  0,0,0,0,1,0,0,0,  1,1,1,1,1,1,1,1,  1,0,0,0,0,0,0,0,  1,0,0,0,0,0,0,0,  1,0,0,0,0,0,0,0,  ]))
PTTN_SCALE = r1b_from_array( 8, 8, float_array([0,0,0,0,1,0,0,0,  0,0,0,1,0,1,0,0,  1,1,1,0,0,0,1,1,  1,0,0,0,0,0,0,0,  1,0,0,0,0,0,0,0,  0,1,0,0,0,0,0,1,  0,0,1,1,1,1,1,0,  0,0,0,0,1,0,0,0,  ]))
PTTN_WAVES = r1b_from_array( 8, 8, float_array([0,0,0,0,0,0,1,0,  0,0,0,0,0,1,0,1,  1,0,0,0,1,0,0,0,  1,0,0,0,1,0,0,0,  1,0,0,0,1,0,0,0,  1,0,0,0,1,0,0,0,  0,1,0,1,0,0,0,0,  0,0,1,0,0,0,0,0,  ]))
PTTN_CHESS = r1b_from_array( 4, 4, float_array([1,1,0,0,  1,1,0,0,  0,0,1,1,  0,0,1,1,  ]))
PTTN_DMOND = r1b_from_array( 8, 8, float_array([0,0,0,0,1,0,0,0,  0,0,0,1,0,1,0,0,  0,0,1,0,1,0,1,0,  0,1,0,1,0,1,0,1,  0,0,1,0,1,0,1,0,  0,0,0,1,0,1,0,0,  0,0,0,0,1,0,0,0,  0,0,0,0,0,0,0,0,  ]))

FONT_FG8X12 = r1b_get_font_fg8x12()

NULL = nullptr()




