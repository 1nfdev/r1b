# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _r1b
else:
    import _r1b

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class floatArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _r1b.floatArray_swiginit(self, _r1b.new_floatArray(nelements))
    __swig_destroy__ = _r1b.delete_floatArray

    def __getitem__(self, index):
        return _r1b.floatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _r1b.floatArray___setitem__(self, index, value)

    def cast(self):
        return _r1b.floatArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _r1b.floatArray_frompointer(t)

# Register floatArray in _r1b:
_r1b.floatArray_swigregister(floatArray)

def floatArray_frompointer(t):
    return _r1b.floatArray_frompointer(t)

class r1b_im_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    w = property(_r1b.r1b_im_t_w_get, _r1b.r1b_im_t_w_set)
    h = property(_r1b.r1b_im_t_h_get, _r1b.r1b_im_t_h_set)
    data = property(_r1b.r1b_im_t_data_get, _r1b.r1b_im_t_data_set)

    def __init__(self):
        _r1b.r1b_im_t_swiginit(self, _r1b.new_r1b_im_t())
    __swig_destroy__ = _r1b.delete_r1b_im_t

# Register r1b_im_t in _r1b:
_r1b.r1b_im_t_swigregister(r1b_im_t)

class r1b_font_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    h = property(_r1b.r1b_font_t_h_get, _r1b.r1b_font_t_h_set)
    glyphs = property(_r1b.r1b_font_t_glyphs_get, _r1b.r1b_font_t_glyphs_set)
    n = property(_r1b.r1b_font_t_n_get, _r1b.r1b_font_t_n_set)
    offsets = property(_r1b.r1b_font_t_offsets_get, _r1b.r1b_font_t_offsets_set)
    sizes = property(_r1b.r1b_font_t_sizes_get, _r1b.r1b_font_t_sizes_set)
    cmap = property(_r1b.r1b_font_t_cmap_get, _r1b.r1b_font_t_cmap_set)
    flags = property(_r1b.r1b_font_t_flags_get, _r1b.r1b_font_t_flags_set)

    def __init__(self):
        _r1b.r1b_font_t_swiginit(self, _r1b.new_r1b_font_t())
    __swig_destroy__ = _r1b.delete_r1b_font_t

# Register r1b_font_t in _r1b:
_r1b.r1b_font_t_swigregister(r1b_font_t)

class r1b_mesh_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    X = property(_r1b.r1b_mesh_t_X_get, _r1b.r1b_mesh_t_X_set)
    Y = property(_r1b.r1b_mesh_t_Y_get, _r1b.r1b_mesh_t_Y_set)
    Z = property(_r1b.r1b_mesh_t_Z_get, _r1b.r1b_mesh_t_Z_set)
    tris = property(_r1b.r1b_mesh_t_tris_get, _r1b.r1b_mesh_t_tris_set)
    norms = property(_r1b.r1b_mesh_t_norms_get, _r1b.r1b_mesh_t_norms_set)
    n_vtx = property(_r1b.r1b_mesh_t_n_vtx_get, _r1b.r1b_mesh_t_n_vtx_set)
    n_tri = property(_r1b.r1b_mesh_t_n_tri_get, _r1b.r1b_mesh_t_n_tri_set)

    def __init__(self):
        _r1b.r1b_mesh_t_swiginit(self, _r1b.new_r1b_mesh_t())
    __swig_destroy__ = _r1b.delete_r1b_mesh_t

# Register r1b_mesh_t in _r1b:
_r1b.r1b_mesh_t_swigregister(r1b_mesh_t)


def r1b_make_tmp0(w, h):
    return _r1b.r1b_make_tmp0(w, h)

def r1b_make_tmp1(w, h):
    return _r1b.r1b_make_tmp1(w, h)

def r1b_cleanup():
    return _r1b.r1b_cleanup()

def r1b_read(path):
    return _r1b.r1b_read(path)

def r1b_zeros(w, h):
    return _r1b.r1b_zeros(w, h)

def r1b_ones(w, h):
    return _r1b.r1b_ones(w, h)

def r1b_infs(w, h):
    return _r1b.r1b_infs(w, h)

def r1b_free(im):
    return _r1b.r1b_free(im)

def r1b_transpose(im):
    return _r1b.r1b_transpose(im)

def r1b_transpose_flip(im):
    return _r1b.r1b_transpose_flip(im)

def r1b_normalize(im, lo, hi):
    return _r1b.r1b_normalize(im, lo, hi)

def r1b_copy_of(im):
    return _r1b.r1b_copy_of(im)

def r1b_copy_to(im, dst):
    return _r1b.r1b_copy_to(im, dst)

def r1b_dither_fs(im):
    return _r1b.r1b_dither_fs(im)

def r1b_dither_ord(im):
    return _r1b.r1b_dither_ord(im)

def r1b_dither(im, mode):
    return _r1b.r1b_dither(im, mode)

def r1b_log(im):
    return _r1b.r1b_log(im)

def r1b_encode(im, n_bytes_written):
    return _r1b.r1b_encode(im, n_bytes_written)

def r1b_encode2file(path, im):
    return _r1b.r1b_encode2file(path, im)

def r1b_lpr(printer, im):
    return _r1b.r1b_lpr(printer, im)

def r1b_snapshot(path, im):
    return _r1b.r1b_snapshot(path, im)

def r1b_resample_nearest(im, w, h):
    return _r1b.r1b_resample_nearest(im, w, h)

def r1b_resample_bilinear(im, w, h):
    return _r1b.r1b_resample_bilinear(im, w, h)

def r1b_resample(im, w, h, mode):
    return _r1b.r1b_resample(im, w, h, mode)

def r1b_get(im, x, y, mode):
    return _r1b.r1b_get(im, x, y, mode)

def r1b_set(im, x, y, val, mode):
    return _r1b.r1b_set(im, x, y, val, mode)

def r1b_conv2d(im, kern, border):
    return _r1b.r1b_conv2d(im, kern, border)

def r1b_triangle(im, x0, y0, x1, y1, x2, y2, pttn, mode):
    return _r1b.r1b_triangle(im, x0, y0, x1, y1, x2, y2, pttn, mode)

def r1b_rect(im, x0, y0, x1, y1, pttn, mode):
    return _r1b.r1b_rect(im, x0, y0, x1, y1, pttn, mode)

def r1b_line(im, x0, y0, x1, y1, val, mode):
    return _r1b.r1b_line(im, x0, y0, x1, y1, val, mode)

def r1b_lines(im, Xs, Ys, n, close, val, mode):
    return _r1b.r1b_lines(im, Xs, Ys, n, close, val, mode)

def r1b_thick_line(im, x0, y0, x1, y1, val, thick, mode):
    return _r1b.r1b_thick_line(im, x0, y0, x1, y1, val, thick, mode)

def r1b_load_font_hex(path, h, cp0, cp1, flags):
    return _r1b.r1b_load_font_hex(path, h, cp0, cp1, flags)

def r1b_destroy_font(font):
    return _r1b.r1b_destroy_font(font)

def r1b_glyph_index_lin_search(font, cp):
    return _r1b.r1b_glyph_index_lin_search(font, cp)

def r1b_glyph_index_bin_search(font, cp, i0, i1):
    return _r1b.r1b_glyph_index_bin_search(font, cp, i0, i1)

def r1b_glyph_index(font, cp):
    return _r1b.r1b_glyph_index(font, cp)

def r1b_putchar(im, cp, x, y, font, val, mode, highlight):
    return _r1b.r1b_putchar(im, cp, x, y, font, val, mode, highlight)

def r1b_text(im, str, x, y, font, val, mode, highlight):
    return _r1b.r1b_text(im, str, x, y, font, val, mode, highlight)

def r1b_text_ascii(im, str, x, y, font, val, mode, highlight):
    return _r1b.r1b_text_ascii(im, str, x, y, font, val, mode, highlight)

def r1b_area(X, Y, n):
    return _r1b.r1b_area(X, Y, n)

def r1b_triangulate_snip(X, Y, u, v, w, n, V):
    return _r1b.r1b_triangulate_snip(X, Y, u, v, w, n, V)

def r1b_triangulate(X, Y, n, triangles):
    return _r1b.r1b_triangulate(X, Y, n, triangles)

def r1b_polygon_convex(im, Xs, Ys, n, pttn, mode):
    return _r1b.r1b_polygon_convex(im, Xs, Ys, n, pttn, mode)

def r1b_polygon_concave(im, Xs, Ys, n, pttn, mode):
    return _r1b.r1b_polygon_concave(im, Xs, Ys, n, pttn, mode)

def r1b_polygon(im, Xs, Ys, n, pttn, mode, typ):
    return _r1b.r1b_polygon(im, Xs, Ys, n, pttn, mode, typ)

def r1b_ellipse(im, cx, cy, rx, ry, ang, pttn, mode):
    return _r1b.r1b_ellipse(im, cx, cy, rx, ry, ang, pttn, mode)

def r1b_line_ellipse(im, cx, cy, rx, ry, ang, detail, val, mode):
    return _r1b.r1b_line_ellipse(im, cx, cy, rx, ry, ang, detail, val, mode)

def r1b_blit(dst, src, msk, x0, y0, x1, y1, sx, sy, bdmode, mode):
    return _r1b.r1b_blit(dst, src, msk, x0, y0, x1, y1, sx, sy, bdmode, mode)

def r1b_load_obj(path):
    return _r1b.r1b_load_obj(path)

def r1b_mesh_bbox(mesh, xmin, ymin, zmin, xmax, ymax, zmax):
    return _r1b.r1b_mesh_bbox(mesh, xmin, ymin, zmin, xmax, ymax, zmax)

def r1b_normalize_mesh(mesh):
    return _r1b.r1b_normalize_mesh(mesh)

def r1b_destroy_mesh(mesh):
    return _r1b.r1b_destroy_mesh(mesh)

def r1b_triangle3d(im, depth, f, x0, y0, z0, x1, y1, z1, x2, y2, z2, pttn, vals, mode):
    return _r1b.r1b_triangle3d(im, depth, f, x0, y0, z0, x1, y1, z1, x2, y2, z2, pttn, vals, mode)

def r1b_line3d(im, depth, depth_read, f, x0, y0, z0, x1, y1, z1, val, mode):
    return _r1b.r1b_line3d(im, depth, depth_read, f, x0, y0, z0, x1, y1, z1, val, mode)

def r1b_transform_mesh(mesh, mat):
    return _r1b.r1b_transform_mesh(mesh, mat)

def r1b_compute_vertex_normals(mesh):
    return _r1b.r1b_compute_vertex_normals(mesh)

def r1b_render_mesh(im, depth, mesh, f, pttn, light, wire_val, shdr, wire):
    return _r1b.r1b_render_mesh(im, depth, mesh, f, pttn, light, wire_val, shdr, wire)




